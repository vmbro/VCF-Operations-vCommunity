{"9ee466de-616a-41a9-b573-e8513e646ea3": {
   "resourceKinds": [{
      "resourceKindKey": "VirtualMachine",
      "adapterKindKey": "VMWARE"
   }],
   "modificationTime": 1732963222923,
   "name": "vSphere VM Performance",
   "formula": "sum([
      // CPU Queue metric
      (${this, metric=guest|20_sec_peak_cpu_queue} as cpuQ < 1 
         ? (100 - (cpuQ/1 * 25)) 
         : cpuQ < 2 
           ? (75 - ((cpuQ-1)/1 * 25))*2 
           : cpuQ < 4 
             ? (50-((cpuQ-2)/2 * 25))*4 
             : (25 - (min([cpuQ-4,4])/4*25))*8),

      // Disk Queue metric  
      (${this, metric=guest|20_sec_peak_disk_queue} as DiskQ < 20 
         ? (100 - (DiskQ/20 * 25)) 
         : DiskQ < 40 
           ? (75 - ((DiskQ-20)/20 * 25))*2 
           : DiskQ < 80 
             ? (50-((DiskQ-40)/40 * 25))*4 
             : (25 - (min([DiskQ-80,80])/80*25))*8),

      // CPU Ready Time metric
      (${this, metric=cpu|20_sec_peak_readyPct} as Ready < 2 
         ? (100 - (Ready/2 * 25)) 
         : Ready < 4 
           ? (75 - ((Ready-2)/2 * 25))*2 
           : Ready < 8 
             ? (50-((Ready-4)/4 * 25))*4 
             : (25 - (min([Ready-8,8])/8*25))*8),

      // CPU Co-Stop metric
      (${this, metric=cpu|20_sec_peak_costopPct} as coStop < 1 
         ? (100 - (coStop/1 * 25)) 
         : coStop < 2 
           ? (75 - ((coStop-1)/1 * 25))*2 
           : coStop < 4 
             ? (50-((coStop-2)/2 * 25))*4 
             : (25 - (min([coStop-4,4])/4*25))*8),

      // CPU IO Wait metric
      (${this, metric=cpu|20_sec_peak_iowaitPct} as oWait < 1 
         ? (100 - (oWait/1 * 25)) 
         : oWait < 2 
           ? (75 - ((oWait-1)/1 * 25))*2 
           : oWait < 4 
             ? (50-((oWait-2)/2 * 25))*4 
             : (25 - (min([oWait-4,4])/4*25))*8),

      // CPU Overlap metric
      (${this, metric=cpu|20_sec_peak_overlap} as Overlap < 0.5 
         ? (100 - (Overlap/0.5 * 25)) 
         : Overlap < 1 
           ? (75 - ((Overlap-0.5)/0.5 * 25))*2 
           : Overlap < 2 
             ? (50-((Overlap-1)/1 * 25))*4 
             : (25 - (min([Overlap-2,2])/2*25))*8),

      // Memory Host Contention metric
      (${this, metric=mem|20_sec_peak_host_contentionPct} as mLatc < 0.5 
         ? (100 - (mLatc/0.5 * 25)) 
         : mLatc < 1 
           ? (75 - ((mLatc-0.5)/0.5 * 25))*2 
           : mLatc < 2 
             ? (50-((mLatc-1)/1 * 25))*4 
             : (25 - (min([mLatc-2,2])/2*25))*8),

      // Virtual Disk Latency metric
      (${this, metric=virtualDisk|20_sec_peak_totalLatency_average} as dLatc < 20 
         ? (100 - (dLatc/20 * 25)) 
         : dLatc < 40 
           ? (75 - ((dLatc-20)/20 * 25))*2 
           : dLatc < 80 
             ? (50-((dLatc-40)/40 * 25))*4 
             : (25 - (min([dLatc-80,80])/80*25))*8),

      // Guest Memory Free metric
      (${this, metric=guest|mem.free_latest} as mFree/1024 > 512 
         ? min([mFree/1024-512,512])/512 * 25 + 75 
         : mFree/1024 > 256 
           ? ((mFree/1024-256)/256 * 25 + 50)*2 
           : mFree/1024 > 128 
             ? ((mFree/1024-128)/128 * 25 + 25)*4 
             : mFree/1024/128*25*8),

      // Guest Page Out Rate metric
      (${this, metric=guest|page.outRate_latest} as PageO < 1000 
         ? (100 - (PageO/1000 * 25)) 
         : PageO < 2000 
           ? (75 - ((PageO-1000)/1000 * 25))*2 
           : PageO < 4000 
             ? (50-((PageO-2000)/2000 * 25))*4 
             : (25 - (min([PageO-4000,4000])/4000*25))*8),

      // Memory Balloon metric
      (${this, metric=mem|balloonPct} as Balloon < 2 
         ? (100 - (Balloon/2 * 25)) 
         : Balloon < 4 
           ? (75 - ((Balloon-2)/2 * 25))*2 
           : Balloon < 8 
             ? (50-((Balloon-4)/4 * 25))*4 
             : (25 - (min([Balloon-8,8])/8*25))*8),

      // CPU Run Time metric
      (${this, metric=cpu|net_run} as Run < 80 
         ? (100 - (max([Run-60,0])/20 * 25)) 
         : Run < 90 
           ? (75 - ((Run-80)/10 * 25))*2 
           : Run < 95 
             ? (50-((Run-90)/5 * 25))*4 
             : (25 - ((Run-95)/5*25))*8),

      // Memory Zip Swap metric
      (${this, metric=Super Metric|sm_1cd5caa5-e8d8-48f8-b02b-c233fd8d235e} as ZipSwap < 0.5 
         ? (100 - (ZipSwap/0.5 * 25)) 
         : ZipSwap < 1 
           ? (75 - ((ZipSwap-0.5)/0.5 * 25))*2 
           : ZipSwap < 2 
             ? (50-((ZipSwap-1)/1 * 25))*4 
             : (25 - (min([ZipSwap-2,2])/2*25))*8),

      // Network Dropped TX Packets metric
      (${this, metric=net|droppedTxPct_max} as netTXd < 0.25 
         ? (100 - (netTXd/0.25 * 25)) 
         : netTXd < 0.5 
           ? (75 - ((netTXd-0.25)/0.5 * 25))*2 
           : netTXd < 1 
             ? (50-((netTXd-0.5)/1 * 25))*4 
             : (25 - (min([netTXd-2,2])/2*25))*8)
   ]) / sum([
      // Weights for each metric based on severity
      (cpuQ < 1 ? 1 : (cpuQ < 2 ? 2 : (cpuQ < 4 ? 4 : 8))),
      (DiskQ < 20 ? 1 : (DiskQ < 40 ? 2 : (DiskQ < 80 ? 4 : 8))),
      (Ready < 2 ? 1 : (Ready < 4 ? 2 : (Ready < 8 ? 4 : 8))),
      (coStop < 1 ? 1 : (coStop < 2 ? 2 : (coStop < 4 ? 4 : 8))),
      (oWait < 1 ? 1 : (oWait < 2 ? 2 : (oWait < 4 ? 4 : 8))),
      (Overlap < 0.5 ? 1 : (Overlap < 1 ? 2 : (Overlap < 2 ? 4 : 8))),
      (mLatc < 0.5 ? 1 : (mLatc < 1 ? 2 : (mLatc < 2 ? 4 : 8))),
      (dLatc < 20 ? 1 : (dLatc < 40 ? 2 : (dLatc < 80 ? 4 : 8))),
      (mFree/1024 < 128 ? 8 : (mFree/1024 < 256 ? 4 : (mFree/1024 < 512 ? 2 : 1))),
      (PageO < 1000 ? 1 : (PageO < 2000 ? 2 : (PageO < 4000 ? 4 : 8))),
      (Balloon < 2 ? 1 : (Balloon < 4 ? 2 : (Balloon < 8 ? 4 : 8))),
      (Run < 80 ? 1 : (Run < 90 ? 2 : (Run < 95 ? 4 : 8))),
      (ZipSwap < 0.5 ? 1 : (ZipSwap < 1 ? 2 : (ZipSwap < 2 ? 4 : 8))),
      (netTXd < 0.25 ? 1 : (netTXd < 0.5 ? 2 : (netTXd < 1 ? 4 : 8)))
   ])",
   "description": "Key Performance Indicator (%) of a virtual machine and its Guest OS. This is the primary metric to determine VM performance over time. 20 second average metrics are used instead of 5-minute average as this metric is a leading indicator.\n\nFor details, see VCF Operations Transformation book and vSphere Metrics book, which are parts of Operationalize Your World.\n",
   "unitId": "percent",
   "modifiedBy": "9124aca9-8198-4ae9-bd45-c0cc82204f83"
}}